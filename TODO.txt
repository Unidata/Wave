Bugs:

* Fix running on OSX

Features/Larger Design:
* Anti-aliasing
* Should layers be QQuickItems?
* Set up Travis-CI

3a) Plot radar data

3b) Work on plotting hurricane information

4) What exactly is our design for adding data displays. Obviously, the
   QtQuick stuff will control the list of displays, and both it and
   the data canvas are views on this. But where are the separations for
   adding data and displays on the data? Does a separation of these
   two items, make sense? Could this get turned into a full-fledged
   pipeline? Still need to optimize for the common case: I want to see
   the data from X.

5) How exactly should things be abstracted to handle getting better
   desktop performance with OpenGL 4.x while being able to fallback
   to OpenGL 2.x?

Longer term:
* Refactor to try to hide more details of openGL debugging/profiling

* Once we get to solid functionality, need to start adding tests and
  getting that infrastructure in place

* Hook up clang analyzer? 

* Any other clang, etc. analysis tools?

* Need to develop python plugin API, and all the accompanying
  infrastructure.

* Can we use Quick animation classes to control animations of data?

* Investigate scenegraph capabilities to see if it would be possible
  to just use its node classes for our visualization needs...

* Examine the possiblity of using Qt Quick Components or whatnot
  to do menubars, etc. on desktop. 
