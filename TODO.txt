3a) Plot radar data

3b) Work on plotting hurricane information

3c) Need to warp images

4) What exactly is our design for adding data displays. Obviously, the
   QtQuick stuff will control the list of displays, and both it and
   the data canvas are views on this. But where are the separations for
   adding data and displays on the data? Does a separation of these
   two items, make sense? Could this get turned into a full-fledged
   pipeline? Still need to optimize for the common case: I want to see
   the data from X.

5) How exactly should things be abstracted to handle getting better
   desktop performance with OpenGL 4.x while being able to fallback
   to OpenGL 2.x?

Bugs:

* Fix running on OSX
* Texture release from raster image

Features/Larger Design:
* Factor out GDAL wrangling and texture wrangling
* Anti-aliasing
* Should layers be QQuickItems?
* Set up Travis-CI
* Line width

* Need a data cache and manager
  - Handle loading datasets in threads

* Need to investigate reducing memory load (esp. on graphics card)
  by exploiting scale/bounding box. Possibly using a tile-based system
  using quadtrees/octrees.

* Work projections/camera towards 3D and globe

* UI infrastructure for layers

* Separate layers out into relevant components
  - Layer as controller: Has UI to select data/control view
  - Data (model of MVC?)
  - OpenGL renderer (View of MVC?)

* Settings infrastructure

Longer term:
* Refactor to try to hide more details of openGL debugging/profiling

* Once we get to solid functionality, need to start adding tests and
  getting that infrastructure in place

* Hook up clang analyzer? 

* Any other clang, etc. analysis tools?

* Need to develop python plugin API, and all the accompanying
  infrastructure.

* Can we use Quick animation classes to control animations of data?

* Investigate scenegraph capabilities to see if it would be possible
  to just use its node classes for our visualization needs...

* Examine the possiblity of using Qt Quick Components or whatnot
  to do menubars, etc. on desktop. 
